I have written the allocator and profiler as two seperate programs. The memeory manager is not stand alone however as
it does not have a main function. Each of these programs has an associated make file. The make file for the
memory manager produces a static library "libMM.a". The make file for the profiler links "libMM.a" with the profiler
(as well as going other things of course.)

I have written the memory manager in C++ (I have not used new however, only sbrk.) I use a struct in the memory
manager but it has no constructor or destructor (so the use of new and delete should not be required with it.) There
is also a function "checkPODProper()" that is run upon the first call to setAllocationAlgorithm() or alloc()
(whichever is called first) that checks whether or not the struct "chunk" is a POD (plain old data) and therefore
whether it is safe to use with C (although it is not used with C directly we do not use new and delete with it.).
The program exits if it is not a POD. I would have liked this check to be done at compile time but I did not know
how to do such a thing.

The profiler is written in C. There is a script "build.sh" that runs the make file for the memory manager, copies
over the newly built "libMM.a", copies over "mm.hpp", renames "mm.hpp" to "mm.h", uses sed to remove the line
containing "extern "C" (used for the function name mangling.) and the associated curly braces from "mm.h" and
finally runs the make file from the profiler.

I have not overloaded new in the memory manager as the only time I do any thing with the memory returned from sbrk
is when I cast it to "chunk" and as mentioned "chunk" is garunteed to be a POD i.e. C compatible and the profiler is
written in C so I don't need to overload new or delete for it.

Also you can't mark me down for long functions because I'm doing it puerly for efficiency reasons ;) (don't want too many of those expensive function calls.) Also don't worry about the fact that it's probably all wildly nonoptimal
anyway ;)

I have made the decision not to populate memory allocated in the tests because that seems like a test of they memory
and caching subsystems of my mahcine rather then a test of the allocator and would acctually just make it harder
to see discrepancies in the timings. Once the allocator has returned a pointer it is not involved untill that pointer
is passed back to it for deallocation. So populating the memory that that pointer points to has nothing to do with the
performance of the allocator.